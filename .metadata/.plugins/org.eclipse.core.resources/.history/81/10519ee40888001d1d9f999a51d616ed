package com.example.demo.consumer;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.kafka.KafkaProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import org.springframework.kafka.support.serializer.JsonSerializer;
import org.springframework.lang.NonNull;

import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;

@Configuration
public class KafkaConfig {

	@Autowired
	 KafkaProperties kafkaProperties;
	@Autowired
	 ObjectMapper objectMapper;

	@Bean
	public Map<String, Object> producerConfigs() {
		Map<String, Object> props = new HashMap<>();

		props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
		props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
		props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);

	//	props.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, KafkaProducerPartitioner.class);

		props.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, "snappy");
		props.put(ProducerConfig.ACKS_CONFIG, "all");
		props.put(ProducerConfig.RETRY_BACKOFF_MS_CONFIG, "1000");
		props.put(ProducerConfig.MAX_REQUEST_SIZE_CONFIG, 16 * 1024 * 1024);
		props.put(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, 1);
		props.put(ProducerConfig.RETRIES_CONFIG, 100);

		props.putAll(kafkaProperties.getSsl().buildProperties());
		props.putAll(kafkaProperties.getProperties());

		return props;
	}

	public Map<String, Object> consumerProperties() {
		Map<String, Object> props = new HashMap<>();
		props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaProperties.getBootstrapServers());
		props.put(ConsumerConfig.GROUP_ID_CONFIG, kafkaProperties.getConsumer().getGroupId());
		props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);
		// props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, 1000000000);
		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);
		props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "latest");
		props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, 1);
		props.put(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG, 5 * 60 * 1000);
		props.put(ConsumerConfig.FETCH_MAX_BYTES_CONFIG, 1024 * 1000);

		props.put("buffer.memory", 1024 * 1000);
		props.putAll(kafkaProperties.getSsl().buildProperties());
		props.putAll(kafkaProperties.getProperties());

		return props;
	}

	@Bean
	public ProducerFactory<String, String> producerFactory() {
		DefaultKafkaProducerFactory defaultKafkaProducerFactory = new DefaultKafkaProducerFactory<>(producerConfigs());
		//defaultKafkaProducerFactory.setValueSerializer(getCustomValueSerializer());
		return defaultKafkaProducerFactory;
	}

	@Bean
	public KafkaTemplate<String, String> kafkaTemplate() {
		return new KafkaTemplate<>(producerFactory());
	}

//	@Bean
//	public JsonSerializer<?> getCustomValueSerializer() {
//		SimpleModule oidMod = new SimpleModule("LocalDateTime", new Version(1, 0, 0, null, null, null));
//		oidMod.addSerializer(LocalDateTime.class, new JsonLocalDateTimeSerializer());
//		objectMapper.registerModule(oidMod);
//		return new JsonSerializer<>(objectMapper);
//	}

}
